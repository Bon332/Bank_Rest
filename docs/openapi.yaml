# Здесь будет OpenAPI описание всех доступных эндпоинтов и моделей данных.
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Card Controller
  description: Операции с картами (ADMIN и USER)
- name: User Controller
  description: "Управление пользователями (только для ADMIN, кроме профиля)"
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - User Controller
      summary: Получить профиль пользователя
      description: "ADMIN может получить любого, USER — только свой"
      operationId: getUserProfile
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDto"
      security:
      - bearerAuth: []
    put:
      tags:
      - User Controller
      summary: Обновить пользователя
      description: Доступно только ADMIN
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDto"
      security:
      - bearerAuth: []
    delete:
      tags:
      - User Controller
      summary: Удалить пользователя
      description: Доступно только ADMIN
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/v1/users:
    get:
      tags:
      - User Controller
      summary: Получить всех пользователей (с пагинацией)
      description: Доступно только ADMIN
      operationId: getAllUsers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageUserResponseDto"
      security:
      - bearerAuth: []
    post:
      tags:
      - User Controller
      summary: Создать пользователя
      description: Доступно только ADMIN
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards:
    post:
      tags:
      - Card Controller
      summary: Создать карту
      description: Доступно только ADMIN
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/{id}/request-block:
    post:
      tags:
      - Card Controller
      summary: Запрос на блокировку карты
      description: USER может подать запрос на блокировку своей карты
      operationId: requestBlockCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/{id}/block:
    post:
      tags:
      - Card Controller
      summary: Заблокировать карту
      description: Доступно только ADMIN
      operationId: blockCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/{id}/activate:
    post:
      tags:
      - Card Controller
      summary: Активировать карту
      description: Доступно только ADMIN
      operationId: activateCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/transfer:
    post:
      tags:
      - Card Controller
      summary: Перевод между картами
      description: USER может переводить средства между своими картами
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequestDto"
        required: true
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
  /api/v1/auth/register:
    post:
      tags:
      - auth-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequestDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RegisterResponseDto"
  /api/v1/auth/login:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/cards/{id}/balance:
    get:
      tags:
      - Card Controller
      summary: Получить баланс карты
      description: USER может видеть баланс своей карты
      operationId: getCardBalance
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: number
      security:
      - bearerAuth: []
  /api/v1/cards/my:
    get:
      tags:
      - Card Controller
      summary: Мои карты (список)
      description: USER может получить только свои карты
      operationId: getMyCards
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/my/paged:
    get:
      tags:
      - Card Controller
      summary: Мои карты (с пагинацией)
      description: USER может получить только свои карты
      operationId: getMyCardsPaged
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/all:
    get:
      tags:
      - Card Controller
      summary: Получить все карты (с пагинацией)
      description: Доступно только ADMIN
      operationId: getAllCards
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponseDto"
      security:
      - bearerAuth: []
  /api/v1/cards/{id}:
    delete:
      tags:
      - Card Controller
      summary: Удалить карту
      description: Доступно только ADMIN
      operationId: deleteCard
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
components:
  schemas:
    UserRequestDto:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
    CardCreateRequestDto:
      required:
      - expiryDate
      - number
      - userId
      type: object
      properties:
        userId:
          type: integer
          format: int64
        number:
          type: string
        expiryDate:
          type: string
          format: date
    CardResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedNumber:
          type: string
        expiryDate:
          type: string
          format: date
        status:
          type: string
          enum:
          - ACTIVE
          - REQUESTED_BLOCK
          - BLOCKED
          - EXPIRED
        balance:
          type: number
    TransferRequestDto:
      required:
      - amount
      - fromCardId
      - toCardId
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
    AuthRequestDto:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 50
          minLength: 3
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
    RegisterResponseDto:
      type: object
      properties:
        message:
          type: string
        userId:
          type: integer
          format: int64
        username:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageUserResponseDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserResponseDto"
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    PageCardResponseDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardResponseDto"
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
